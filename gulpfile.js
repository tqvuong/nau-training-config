/**
 * Generated by generator-naujs
 */
/*eslint-env node*/
const path = require('path');
const gulp = require('gulp');
const browserSync = require('browser-sync').create();

// this is my proposed way to group all gulp component into a namespace
const gulpPlugins = require('gulp-load-plugins')();

/**
 * Configs
 */
let mode = 'dev';
const paths = {
	src: 'src',
	dist: 'dist',
	assets: 'private',
	// subfolders:
	fonts: 'fonts',
	images: 'img',
	mock: 'mock',
	scripts: 'js',
	styles: 'css',
	// temporary
	tmp: '.tmp',
};

// other computed paths
paths.srcFonts = `${paths.src}/${paths.fonts}`;
paths.srcImages = `${paths.src}/${paths.images}`;
paths.srcScripts = `${paths.src}/${paths.scripts}`;
paths.srcStyles = `${paths.src}/${paths.styles}`;
paths.distFonts = `${paths.dist}/${paths.fonts}`;
paths.distImages = `${paths.dist}/${paths.images}`;
paths.distScripts = `${paths.dist}/${paths.scripts}`;
paths.distStyles = `${paths.dist}/${paths.styles}`;
/*generator: iconfont*/

/**
 * Task: styles
 * compile sass, add browser prefix
 */
gulp.task('styles', () =>
	gulp
		.src(path.join(paths.srcStyles, '/*.scss'))
		.pipe(gulpPlugins.sourcemaps.init())
		.pipe(
			gulpPlugins.sass({
				outputStyle: 'expanded',
				precision: 10,
				includePaths: ['.'],
				onError: console.error.bind(console, 'Sass error:'),
			})
		)
		.pipe(gulpPlugins.postcss([require('autoprefixer')({ browsers: ['last 2 version', 'ie >= 9'] })]))
		.pipe(gulpPlugins.if(mode === 'dev', gulpPlugins.sourcemaps.write()))
		.pipe(gulp.dest(paths.srcStyles))
		.pipe(gulpPlugins.if(mode !== 'dev', gulp.dest(paths.distStyles)))
);

/**
 * Task: transpile js
 * compile sass, add browser prefix
 */

gulp.task('transpile-to-es5', () =>
	gulp
		.src(path.join(paths.srcScripts, '/**/*.js'))
		.pipe(gulpPlugins.sourcemaps.init())
		.pipe(
			gulpPlugins.babel({
				presets: ['es2015'],
			})
		)
		.pipe(gulpPlugins.if(mode === 'dev', gulpPlugins.sourcemaps.write()))
		.pipe(gulp.dest(paths.srcStyles))
		.pipe(gulpPlugins.if(mode !== 'dev', gulp.dest(paths.distScripts)))
		.pipe(browserSync.stream())
);

/**
 * Task: copy-images
 * Minify and copy UI images to dist
 */
gulp.task('copy-images', () =>
	gulp
		.src(path.join(paths.srcImages, '**/*'))
		// .pipe(gulpPlugins.cache(gulpPlugins.imagemin({
		// 	progressive: true,
		// 	interlaced: true,
		// 	// don't remove IDs from SVGs, they are often used
		// 	// as hooks for embedding and styling
		// 	svgoPlugins: [{cleanupIDs: false}]
		// })))
		.pipe(gulp.dest(paths.distImages))
);

/**
 * Task: copy-fonts
 * Copy fonts
 */
gulp.task('copy-fonts', () => gulp.src(path.join(paths.srcFonts, '/**/*')).pipe(gulp.dest(paths.distFonts)));

/**
 * Task: copy-extras
 * copy extra files in root folder (.htaccess, robot.txt, favicon.ico...)
 */
gulp.task('copy-extras', () =>
	gulp
		.src([path.join(paths.src, '/*.*'), path.join('!' + paths.src, '/*.html')], {
			dot: true,
			base: 'html',
		})
		.pipe(gulp.dest(paths.dist))
);

/**
 * Task: clean
 * Clean compiled folders
 */
gulp.task('clean', require('del').bind(null, [paths.dist, paths.tmp]));

/**
 * Task: watch
 * Watch for changes
 */
gulp.task('watch', ['styles'], () => {
	// watch for HTML / JS changes
	gulp.watch([path.join(paths.src, '/**/*.html'), path.join(paths.src, '/**/*.js')], event => {
		browserSync.reload(event.path);
	});

	//watch for SCSS changes
	gulp.watch(path.join(paths.src, '/css/**/*.scss'), (/*event*/) => {
		gulp.start('styles');
	});
});

// Browser sync init boilerplate
const browserSyncInit = (baseDir, browser) => {
	browser = browser === undefined ? 'default' : browser;

	var routes = null;
	if (baseDir === paths.src || (Array.isArray(baseDir) && baseDir.indexOf(paths.src) !== -1)) {
		routes = {
			'/bower_components': 'bower_components',
		};
	}

	var server = {
		baseDir: baseDir,
		routes: routes,
	};

	/*
	 * You can add a proxy to your backend by uncommenting the line bellow.
	 * You just have to configure a context which will we redirected and the target url.
	 * Example: $http.get('/users') requests will be automatically proxified.
	 *
	 * For more details and option, https://github.com/chimurai/http-proxy-middleware/blob/v0.0.5/README.md
	 */
	// server.middleware = proxyMiddleware('/users', {target: 'http://jsonplaceholder.typicode.com', proxyHost: 'jsonplaceholder.typicode.com'});

	browserSync.instance = browserSync.init({
		startPath: '/',
		server: server,
		browser: browser,
		port: 7979,
		host: 'localhost',
	});
};

/**
 * Task: serve
 * Serve the app through localhost with browsersync for testing
 */
gulp.task('serve', ['watch'], () => {
	browserSyncInit([paths.tmp, paths.src]);
});

/**
 * Task: serve-build
 * Serve the build through localhost
 */
gulp.task('serve-build', ['build'], () => {
	browserSyncInit([paths.dist]);
});

/**
 * Task: build
 * build to dist folder
 *
 * FIXME: NOT TEST
 */
gulp.task('build', ['clean'], () => {
	mode = 'dist';
	gulp.start(['styles', 'copy-images', 'copy-fonts', 'copy-extras']);
});

// FIXME: NOT tested
gulp.task('report', ['build'], () => gulp.src('dist/**/*').pipe(gulpPlugins.size({ title: 'build', gzip: true })));

/**
 * Default task
 */
gulp.task('default', () => {
	gulp.start('serve');
});
